---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 18.1.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  values:
    fullnameOverride: prometheus
    nameOverride: prometheus
    alertmanager:
      enabled: true
      # logFormat: json
      logLevel: error
      config:
        global:
          resolve_timeout: 5m
          smtp_from: "${ALERTMANAGER_EMAIL}"
          smtp_smarthost: "${SECRET_SMTP}:587"
          smtp_auth_username: "${SECRET_EMAIL}"
          smtp_auth_identity: "${SECRET_EMAIL}"
          smtp_auth_password: "${SECRET_EMAIL_PASSWORD}"
        receivers:
          - name: "null"
          - name: "email"
            email_configs:
              - to: "${SECRET_EMAIL}"
                send_resolved: true
        route:
          receiver: email
          group_wait: 10s
          group_interval: 5m
          repeat_interval: 1h
          group_by: ['alertname', 'job']
          routes:
            - match:
                alertname: Watchdog
              receiver: "null"
            - match:
                severity: critical
              receiver: "email"
              continue: true
        inhibit_rules:
          - source_match:
              severity: critical
            target_match:
              severity: warning
            equal: ['alertname', 'namespace']
      ingress:
        enabled: true
        ingressClassName: traefik
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
        hosts:
          - "alertmanager.${SECRET_DOMAIN}"
        paths:
          - /
        pathType: Prefix
        tls:
          - secretName: alertmanager-tls
            hosts:
              - "alertmanager.${SECRET_DOMAIN}"
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce
              storageClassName: openebs-zfspv-ssd
              resources:
                requests:
                  storage: 1Gi
    prometheus:
      enabled: true
      # logFormat: json
      logLevel: error
      ingress:
        enabled: true
        ingressClassName: traefik
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
        paths:
          - /
        pathType: Prefix
        tls:
          - secretName: prometheus-tls
            hosts:
              - "prometheus.${SECRET_DOMAIN}"
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce
              storageClassName: openebs-zfspv-ssd
              resources:
                requests:
                  storage: 10Gi
        thanos:
          image: quay.io/thanos/thanos:v0.22.0
          version: v0.22.0
          objectStorageConfig:
            name: thanos-objstore
            key: objstore.yml
        # additionalScrapeConfigs:
        #   - job_name: "mikrotik-coredns"
        #     honor_timestamps: true
        #     static_configs:
        #       - targets:
        #           - ${GATEWAY_IP}:9153
    prometheusOperator:
      enabled: true
      configReloaderCpu: 0
      admissionWebhooks:
        certManager:
          enabled: true
    coreDns:
      enabled: true
    kubeApiServer:
      enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    nodeExporter:
      enabled: true
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    prometheus-node-exporter:
      fullnameOverride: node-exporter
    kubeStateMetrics:
      enabled: true
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
    kubeControllerManager:
      enabled: false
    kubeDns:
      enabled: false
    kubeEtcd:
      enabled: false
    kubeProxy:
      enabled: false
    kubeScheduler:
      enabled: false
    grafana:
      enabled: false
      forceDeployDashboards: true
